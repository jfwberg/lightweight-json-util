//String jsonString = '[{"listData" : [[1,2,3],[4,5,6]], "mapData" : {"a" : "b", "child" : {"ca" : "cb"}}}]';
//String jsonString = '{"Name" : "david", "child" : {"name" : "crystal", "grandchild" : {"Name" : "emmett"}}, "childList" : ["GC1", "GC2" , "GC3", {"random": "listItem"},"GC4"]}';
//String jsonString = '{ "status": 0, "result": { "records": [ { "attributes": { "type": "Account", "url": "/services/data/v58.0/sobjects/Account/001Ae000008Lu13IAC" }, "Id": "001Ae000008Lu13IAC", "Name": "Demo Account - 0001", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } }, "Contacts": { "totalSize": 2, "done": true, "records": [ { "attributes": { "type": "Contact", "url": "/services/data/v58.0/sobjects/Contact/003Ae000005ag2fIAA" }, "Id": "003Ae000005ag2fIAA", "AccountId": "001Ae000008Lu13IAC", "FirstName": "Demo", "LastName": "Contact - 0001 - 01", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } }, { "attributes": { "type": "Contact", "url": "/services/data/v58.0/sobjects/Contact/003Ae000005ag2gIAA" }, "Id": "003Ae000005ag2gIAA", "AccountId": "001Ae000008Lu13IAC", "FirstName": "Demo", "LastName": "Contact - 0001 - 02", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } } ] }, "Opportunities": { "totalSize": 2, "done": true, "records": [ { "attributes": { "type": "Opportunity", "url": "/services/data/v58.0/sobjects/Opportunity/006Ae000007ZLgjIAG" }, "Id": "006Ae000007ZLgjIAG", "AccountId": "001Ae000008Lu13IAC", "Name": "Opportunity - 0001 - 01", "StageName": "New", "CloseDate": "2023-09-26", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } }, { "attributes": { "type": "Opportunity", "url": "/services/data/v58.0/sobjects/Opportunity/006Ae000007ZLgkIAG" }, "Id": "006Ae000007ZLgkIAG", "AccountId": "001Ae000008Lu13IAC", "Name": "Opportunity - 0001 - 02", "StageName": "New", "CloseDate": "2023-09-26", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } } ] } }, { "attributes": { "type": "Account", "url": "/services/data/v58.0/sobjects/Account/001Ae000008Lu14IAC" }, "Id": "001Ae000008Lu14IAC", "Name": "Demo Account - 0002", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } }, "Contacts": { "totalSize": 2, "done": true, "records": [ { "attributes": { "type": "Contact", "url": "/services/data/v58.0/sobjects/Contact/003Ae000005ag2pIAA" }, "Id": "003Ae000005ag2pIAA", "AccountId": "001Ae000008Lu14IAC", "FirstName": "Demo", "LastName": "Contact - 0002 - 01", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } }, { "attributes": { "type": "Contact", "url": "/services/data/v58.0/sobjects/Contact/003Ae000005ag2qIAA" }, "Id": "003Ae000005ag2qIAA", "AccountId": "001Ae000008Lu14IAC", "FirstName": "Demo", "LastName": "Contact - 0002 - 02", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } } ] }, "Opportunities": { "totalSize": 2, "done": true, "records": [ { "attributes": { "type": "Opportunity", "url": "/services/data/v58.0/sobjects/Opportunity/006Ae000007ZLgtIAG" }, "Id": "006Ae000007ZLgtIAG", "AccountId": "001Ae000008Lu14IAC", "Name": "Opportunity - 0002 - 01", "StageName": "New", "CloseDate": "2023-09-27", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } }, { "attributes": { "type": "Opportunity", "url": "/services/data/v58.0/sobjects/Opportunity/006Ae000007ZLguIAG" }, "Id": "006Ae000007ZLguIAG", "AccountId": "001Ae000008Lu14IAC", "Name": "Opportunity - 0002 - 02", "StageName": "New", "CloseDate": "2023-09-27", "Owner": { "attributes": { "type": "User", "url": "/services/data/v58.0/sobjects/User/005Ae000000hbEXIAY" }, "Profile": { "attributes": { "type": "Profile", "url": "/services/data/v58.0/sobjects/Profile/00eAe000000Df6zIAC" }, "Name": "System Administrator" } } } ] } } ], "totalSize": 2, "done": true }, "warnings": [] }';
String jsonString = '[[true,true],[true,true],[true,true]]';

Set<String> attributeFilter = new Set<String>{'url'};
Set<String> listNameFilter  = new Set<String>{'records'};

Set<String> columnNames = new Set<String>{};

List<Map<String,Object>> fullTable = createTable(jsonString);
System.debug(JSON.serializePretty(columnNames));
System.debug(JSON.serializePretty(fullTable));




/**
 * @description Method to create a flat data table
 */
List<Map<String,Object>> createTable(String jsonString){
	
	// Validation
	if(String.isBlank(jsonString)){
		throw new StringException('Input cannot be empty');
	}
	
	// The list of data table rows
	List<Map<String,Object>> dataRows = new List<Map<String,Object>>();
	
	// Traverse the parent
	traverseParent(
		JSON.deserializeUntyped(jsonString),
		null,
		dataRows
	);
	
	return dataRows;
}



/**
 * @description Parent selector method, this method splits out how the top level record needs to be handled
 *              based on the type. This makes sure the least amount of type casting has to be done.
 */
private void traverseParent(Object input, String path, List<Map<String,Object>> dataRows){
	if(input instanceof Map<String,Object>){
		traverseParentMap((Map<String,Object>)input, path, dataRows);
	}else if(input instanceof Object[]){
		traverseParentList(        (Object[]) input, path, dataRows);
	}else{
		traverseParentObject(                 input, path, dataRows);
	}
}


private void traverseParentMap(Map<String,Object> input, String path, List<Map<String,Object>> dataRows){
	
	// Create a new row for the parent
	Map<String,Object> row = new Map<String,Object>();
	
	// Iterate each key in the input map
	for(String key : input.keySet()){		
		
		// Continue if a property needs to be ignored
        if(attributeFilter != null && attributeFilter.contains(key)){continue;}
		
		// Traverse all children
		traverseChild(input.get(key), ((String.isNotBlank(path)) ? path + '.' + key : key), row, dataRows, false, 0);
	}
	
	// Add the row to the table
	if(!row.isEmpty()){dataRows.add(row);}
}


private void traverseParentList(Object[] input, String path, List<Map<String,Object>> dataRows){
		
	// Create a new row to combine the values in the list
	Map<String,Object> row = new Map<String,Object>();
	
	// Some values in the list do not have a key, in this cases we need to use the index
	// i.e. the data looks like ["a","b","c", "d"]
	Integer objectIndex = 0;
	
	// Having this type casting again seems redundant, but doing the check in here
	// saves having to do it twice, what on 10k+ statements gives a small performance improvement
	for(Integer i=0, max=input.size();i<max;i++){
		if(input[i] instanceof Map<String,Object>){
			traverseChildMap((Map<String,Object>) input[i], path, row, dataRows, false, null);
		}else if(input[i] instanceof Object[]){
			traverseChildList(         (Object[]) input[i], path, row, dataRows, false, null);
		}else{
			traverseChildObject(                  input[i], path, row, dataRows, true, objectIndex);
			objectIndex++;
		}	
	}
	
	// Add the row to the table
	if(!row.isEmpty()){dataRows.add(row);}
}


/**
 * @description Method to handle a parent object like a Number, String or Boolean
 *              'true', ''"String"'', '123' are all valid JSON Strings, this method
 *              accomodates single value JSON just in case
 */ 
private void traverseParentObject(Object input, String path, List<Map<String,Object>> dataRows){
	// Add the column name
	columnNames.add(String.valueOf(0));
	
	// Add the single value to the output
	dataRows.add(
		new Map<String,Object>{
			String.valueOf(0) => input
		}
	);
}


/**
 * @description Child selector method, this method splits out the wat a child record needs to be handled
 *              based on the type. This makes sure the least amount of type casting has to be done.
 */
private void traverseChild(Object input, String path, Map<String,Object> row, List<Map<String,Object>> dataRows, Boolean isObjectInlist, Integer objectIndex){
	if(input instanceof Object[]){
		traverseChildList((Object[]) input, path, row,dataRows, isObjectInlist, objectIndex);
	}else if(input instanceof Map<String,Object>){
		traverseChildMap((Map<String,Object>) input, path, row, dataRows, isObjectInlist, objectIndex);
	}else{
		traverseChildObject(input, path, row, dataRows, isObjectInlist, objectIndex);
	}
}


private void traverseChildMap(Map<String,Object> input, String path, Map<String,Object> row, List<Map<String,Object>> dataRows, Boolean isObjectInlist, Integer objectIndex){
	for(String key : input.keySet() ){

		// Continue if a property needs to be ignored
		if(attributeFilter != null && attributeFilter.contains(key)){continue;}
	
		// Traverse self for each child record
		traverseChild(input.get(key), ((String.isNotBlank(path)) ? path + '.' + key : key), row, dataRows, isObjectInlist, objectIndex);
	}
}


private void traverseChildList(Object[] input, String path, Map<String,Object> row, List<Map<String,Object>> dataRows, Boolean isObjectInlist, Integer objectIndex){
		
	// Allow to filter out certain list names. Note that this can have some funky results
	// Each list should be added as new records, so handle the list as a PARENT
	traverseParentList(
		input,
		(listNameFilter != null && listNameFilter.contains(path?.substringAfterLast('.'))) ? path?.substringBeforeLast('.') : path,
		dataRows
	);
}


private void traverseChildObject(Object input, String path, Map<String,Object> row, List<Map<String,Object>> dataRows, Boolean isObjectInlist, Integer objectIndex){
	
	// Extract the path so it can be added in to the column names
	path = (isObjectInlist) ? ((String.isNotBlank(path)) ? path + '.'+ objectIndex : String.valueOf(objectIndex)) : path;
	
	// If the object is in a list we need to add the list index as a key
	columnNames.add(path);
	
	// Add the value to the row		
	row.put(path,input);
}
